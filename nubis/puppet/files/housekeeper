#!/bin/bash

# Cloud-init simply appends ssh keys, so after a build we want to truncate any
# authorized_keys files to have positive control over configured keys.
for homedir in $(getent passwd | cut -d ':' -f 6); do
   if [[ -e ${homedir}/.ssh/authorized_keys ]]; then
      sudo rm -f ${homedir}/.ssh/authorized_keys
   elif [[ -e ${homedir}/.ssh/authorized_keys2 ]]; then
      sudo rm -f ${homedir}/.ssh/authorized_keys2
   fi
done

# Remove leftover from packer
sudo rm -rf /tmp/packer-puppet-masterless*

# Remove mail spools
sudo rm -f /var/spool/mail/*

# Remove nubis cache
sudo rm -f /var/cache/nubis/*

# Remove taintededness
sudo rm -f /.tainted

# Document the installed version of packages for forensic analysis later, if needed.
puppet resource package | sudo tee /etc/puppet/package-versions.pp >/dev/null

PROJECT_NAME=$1
if [ "$PROJECT_NAME" != "" ]; then
  puppet resource package | sudo tee /etc/puppet/$PROJECT_NAME-package-versions.pp >/dev/null
fi

# Go through /var/log and truncate all files that have been modified since boot. We could
# truncate everything but this should allow us to erase log entries related to the AMI
# creation without being too pervasive.
#
# This should always run last, otherwise sudo logs will capture any other cleaning activity
# above.
if [[ -r /proc/uptime ]]; then
   uptime=$(awk '{print $1}' /proc/uptime)

   sudo find /var/log -newermt "$uptime seconds ago" -type f -print0 | xargs --verbose -0 sudo truncate -s 0
fi

